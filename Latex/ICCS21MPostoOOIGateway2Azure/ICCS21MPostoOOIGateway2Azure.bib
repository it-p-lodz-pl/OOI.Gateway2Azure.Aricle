% Encoding: UTF-8
@article{PlugProduceByModellingSkills,
  author   = {J. Pfrommer and D. Stogl and K. Aleksandrov and S. Escaida Navarro and B. Hein and J. Beyerer},
  year     = {2015},
  title    = {Plug and produce by modelling skills and service-oriented orchestration of reconfigurable manufacturing systems},
  journal  = {At-Automatisierungstechnik},
  volume   = {63},
  number   = {10},
  pages    = {790-800},
  abstract = {Shortening product lifecycles and small lot sizes require manufacturing systems to adapt increasingly fast. Many existing machine tools, handling and logistics systems provide a generic functionality that is not bound to a specific product. But this flexibility and reconfigurability on the level of individual resources is lost in automated systems that are limited to the production of a fixed set of product variants. We propose a unified abstraction for the skills provided by the available resources and the product-specific manufacturing requirements. From these high-level descriptions, executable manufacturing procedures are derived, exposed as services and dynamically orchestrated at runtime in order to achieve the manufacturing goals. © 2015 Walter de Gruyter Berlin.},
  isbn     = {0178-2312},
  language = {English},
  doi      = {10.1515/auto-2014-1157}
}
@article{RefWorks:doc:5c44e246e4b0591b15ea9e59,
  author   = {P. Th Eugster and P. A. Felber and R. Guerraoui and A. -M Kermarrec},
  year     = {2003},
  title    = {The Many Faces of Publish/Subscribe},
  journal  = {ACM Computing Surveys},
  volume   = {35},
  number   = {2},
  pages    = {114-131},
  isbn     = {0360-0300},
  language = {English},
  doi      = {10.1145/857076.857078}
}
@article{LiteratureSurveyOnOpenPlatformCommunications,
  author  = {González, Isaías and Calderón, Antonio and Figueiredo, João and Sousa, João},
  year    = {2019},
  month   = {05},
  pages   = {510},
  title   = {A Literature Survey on Open Platform Communications (OPC) Applied to Advanced Industrial Environments},
  volume  = {8},
  journal = {Electronics},
  doi     = {10.3390/electronics8050510}
}
@software{mariusz_postol_2020_4361640,
  author    = {Mariusz Postół},
  title     = {Object Oriented Internet; Azure Gateway Implementation 1.0},
  month     = dec,
  year      = 2020,
  publisher = {GitHub},
  version   = {6.1.2},
  doi       = {10.5281/zenodo.4361640},
  url       = {https://github.com/mpostol/OPC-UA-OOI}
}
@inbook{Sunyaev2020,
  author    = {Sunyaev, Ali},
  title     = {Middleware},
  booktitle = {Internet Computing: Principles of Distributed Systems and Emerging Internet-Based Technologies},
  year      = {2020},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {125--154},
  abstract  = {In the context of IT applications and especially in large organizations, integration of existing information systems into new IT environments poses many challenges. One of the biggest issue in this regard is dealing with the systems' heterogenity in terms of used programming languages, operating systems, or even data formats. In order to ensure communication between different information systems, developers must establish common interfaces. This chapter introduces middleware as a type of software which manages and facilitates interactions between applications across computing platforms. Besides a brief definition and overview of middleware, several of its characteristics are described. Furthermore, the differences between the three middleware categories (message-oriented, transaction-oriented and object-oriented middleware) are defined. In addition to these theoretical foundations, some practical implementations are presented.},
  isbn      = {978-3-030-34957-8}
}
@standard{RefWorks:doc:5d98837de4b055984c0eecf0,
  year        = {2018},
  title       = {OPC Unified Architecture Specification Part 14 - PubSub},
  institution = {OPC Foundation},
  type        = {Specyfication},
  number      = {10000-14},
  revision    = {1.04},
  language    = {English},
  url         = {https://opcfoundation.org/developer-tools/specifications-unified-architecture/part-14-pubsub/}
}
@techreport{UAPart14PubSubMainTechnologyFeatures,
  author    = {Mariusz Postol},
  title     = {Object-Oriented Internet; UA Part 14: PubSub Main Technology Features},
  year      = {2020},
  publisher = {gitbook},
  doi       = {10.5281/zenodo.4361640},
  url       = {https://commsvr.gitbook.io/ooi/reactive-communication/readme.pubsubmtf}
}
@inproceedings{mpostol2020,
  author    = {Post{\'o}{\l}, Mariusz},
  editor    = {Krzhizhanovskaya, Valeria V.
and Z{\'a}vodszky, G{\'a}bor
and Lees, Michael H.
and Dongarra, Jack J.
and Sloot, Peter M. A.
and Brissos, S{\'e}rgio
and Teixeira, Jo{\~a}o},
  title     = {Object-Oriented Internet Reactive Interoperability},
  booktitle = {Computational Science -- ICCS 2020},
  year      = {2020},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {409--422},
  abstract  = {Information and Communication Technology has provided society with a vast variety of distributed applications. By design, the deployment of this kind of application has to focus primarily on communication. This article addresses research results on the systematic approach to the design of the meaningful Machine to Machine (M2M) communication targeting distributed mobile applications in the context of new emerging disciplines, i.e. Industry 4.0 and Internet of Things. This paper contributes to the design of a new architecture of mobile IoT solutions designed atop of the M2M communication and composed as multi-vendor cyber-physicals systems. The described reusable library supporting this architecture designed using the reactive interoperability archetype proves that the concept enables a systematic approach to the development and deployment of software applications against mobile IoT solutions based on international standards. Dependency injection and adaptive programming engineering techniques have been engaged to develop a full-featured reference application program and make the proposed solution scalable and robust against deployment environment continuous modifications. The article presents an executive summary of the proof of concept and describes selected conceptual and experimental results achieved as an outcome of the open-source project Object-Oriented Internet targeting multi-vendor plug-and-produce interoperability scenario.},
  isbn      = {978-3-030-50426-7}
}
@inbook{MicrosoftAzureIoTPlatform,
  author = {Bansal, Nirnay},
  year   = {2020},
  month  = {09},
  pages  = {33-48},
  title  = {Microsoft Azure IoT Platform},
  isbn   = {978-1-4842-6040-1}
}
@article{RefWorks:doc:5d92609be4b02eb43d372bd1,
  author   = {V. Kulkarni and S. Reddy},
  year     = {2003},
  title    = {Separation of concerns in model-driven development},
  journal  = {IEEE Software},
  volume   = {20},
  number   = {5},
  pages    = {64-69},
  abstract = {MDD has improved productivity, quality, and platform independence but hasn't been that successful at supporting reuse and system evolution. To do so, a system must be specified as a composition of multiple views corresponding to stakeholders and their concerns. The proposed Template abstraction addresses this problem in an integrated way, dealing with separation of concerns at both the model and the code level.},
  isbn     = {1937-4194},
  doi      = {10.1109/MS.2003.1231154}
}
@online{RefWorks:doc:5d925b77e4b030b4e0596f5d,
  author   = {Martin Fowler},
  year     = {2004},
  month    = {23 January},
  title    = {Inversion of Control Containers and the Dependency Injection pattern},
  volume   = {2019},
  number   = {10-01},
  abstract = {In the Java community there's been a rush of lightweight containers that help to assemble components from different projects into a cohesive application. Underlying these containers is a common pattern to how they perform the wiring, a concept they refer under the very generic name of "Inversion of Control". In this article I dig into how this pattern works, under the more specific name of "Dependency Injection", and contrast it with the Service Locator alternative. The choice between them is less important than the principle of separating configuration from use.},
  url      = {https://www.martinfowler.com/articles/injection.html}
}
@techreport{RefWorks:doc:5d9796cbe4b0f66c52dccf04,
  author      = {Mariusz Postol},
  year        = {2020},
  month       = {October 5},
  title       = {Csharp in Practice Adaptive Programming},
  institution = {Lodz University of Technology},
  abstract    = {The adaptive programming is presented as a catalog of language constructs, patterns, and frameworks used at the development and deployment stage with the goal to increase the adaptability of the program against changing production environment in which it is executed.},
  publisher   = {GitHub},
  doi         = {10.5281/zenodo.2578244},
  url         = {https://github.com/mpostol/TP}
}
@book{RefWorks:doc:5ac86c98e4b009947bbb874c,
  author    = {Wolfgang Mahnke and Stefan-Helmut Leitner and Matthias Damm},
  year      = {2009},
  month     = {May},
  title     = {OPC Unified Architecture},
  publisher = {Springer},
  edition   = {1},
  abstract  = {The OPC Foundation defines standards for online data exchange between automation systems. They address access to current data (OPC DA), alarms and events (OPC A\&E) and historical data (OPC HDA). Those standards are successfully applied in industrial automation. The new OPC Unified Architecture (OPC UA) unifies the existing standards and brings them to state-of-the-art technology using service-oriented architecture (SOA). Main advantages of the new standard are: Platform-independent technology allows the deployment of OPC UA beyond current OPC applications only running on Windows-based PC systems. OPC UA can also run on embedded systems as well as Linux / UNIX based enterprise systems. The provided information can be generically modeled and therefore arbitrary information models can be provided using OPC UA. This book gives an easy to understand introduction into OPC UA and explains the concepts of the standard and other relevant topics that are not directly addressed by the standard.},
  isbn      = {3540688986}
}
@standard{OPCUAPart1,
  year        = {2017},
  title       = {OPC Unified Architecture Specification Part 1 - Overview and Concepts},
  institution = {OPC Foundation},
  type        = {Specyfication},
  number      = {10000-1},
  revision    = {1.04},
  language    = {English},
  url         = {https://opcfoundation.org/developer-tools/specifications-unified-architecture/part-1-overview-and-concepts/}
}
@inbook{RefWorks:doc:5d6cdbbbe4b082ad50f3a83e,
  author    = {Mariusz Postół},
  editor    = {Wojciechowski,Adam and Napieralski,Piotr},
  year      = {2018},
  chapter   = {Machine to Machine Semantic-Data Based Communication: Comprehensive Survey},
  title     = {Computer Game Innovations 2018},
  publisher = {Lodz University of Technology Press},
  address   = {Łódź Poland},
  pages     = {83-101},
  abstract  = {HTTP as a transport protocol and HTML as a description language are the big winners selected by millions of people and they have led to the establishment of the World Wide Web enabling a straightforward possibility to publish new information and expose it in the context of its description. Unfortunately, this is a human-centric environment that cannot be easily adapted to an application-centric approach, which is required to provide distributed globally scoped real-time process control based on the machine to machine communication. The paper presents a generic architecture that can be recognized as a framework to deploy solutions targeting cyber-physical systems established as an integrated set of machines interconnected over the Internet. To support distributed globally scoped information processing solutions, inevitably the machines have to expose and update information in the context that can be used to describe and discover it by other machines. The globalization requires integration standardization. To fulfill this requirement it is also proposed to deploy this architecture using the OPC Unified Architecture industrial integration standard. The aim of this paper is to represent a first attempt towards the machine to machine meaningful communication implementation using existing standardized technologies in compliance with the Industry 4.0 and Internet of Things paradigms. On the basis of the proposed architecture selected machine roles as the processing units and related communication patterns and paths are analyzed in context of the semantics aware data interchange and meaningful data processing.},
  isbn      = {978-83-7283-999-2}
}
@article{RefWorks:doc:5d868e46e4b030b4e0569e60,
  author   = {G. Lawton},
  year     = {2004},
  title    = {Machine-to-machine technology gears up for growth},
  journal  = {Computer},
  volume   = {37},
  number   = {9},
  pages    = {12-15},
  abstract = {Recent forecast states that by 2010, at least 1.5 billion devices will be Internet-connected worldwide. The increasingly popular machine-to-machine (M2M) technology is expected to take advantage of these developments. Specifically, M2M would leverage connectivity to allow machines to communicate directly with one another. Despite its considerable upside, M2M is still relatively new and faces significant obstacles to success such as cost-effectiveness and managing huge data streams from systems with multiple sensors.},
  isbn     = {0018-9162},
  language = {English},
  doi      = {10.1109/MC.2004.137}
}
@article{RefWorks:doc:5d8f6d9ee4b058d660094a94,
  author   = {Z. Meng and Z. Wu and C. Muvianto and J. Gray},
  year     = {2017},
  title    = {A Data-Oriented M2M Messaging Mechanism for Industrial IoT Applications},
  journal  = {IEEE Internet of Things Journal},
  volume   = {4},
  number   = {1},
  pages    = {236-246},
  abstract = {Machine-to-machine (M2M) communication is a key enabling technology for the future industrial Internet of Things applications. It plays an important role in the connectivity and integration of computerized machines, such as sensors, actuators, controllers, and robots. The requirements in flexibility, efficiency, and cross-platform compatibility of the intermodule communication between the connected machines raise challenges for the M2M messaging mechanism toward ubiquitous data access and events notification. This investigation determines the challenges facing the M2M communication of industrial systems and presents a data-oriented M2M messaging mechanism based on ZeroMQ for the ubiquitous data access in rich sensing pervasive industrial applications. To prove the feasibility of the proposed solution, the EU funded PickNPack production line with a reference industrial network architecture is presented, and the communication between a microwave sensor device and the quality assessment and sensing module controller of the PickNPack line is illustrated as a case study. The evaluation is carried out through qualitative analysis and experimental studies, and the results demonstrate the feasibility of the proposed messaging mechanism. Due to the flexibility in dealing with hierarchical system architecture and cross-platform heterogeneity of industrial applications, this messaging mechanism deserves extensive investigations and further evaluations. © 2017 IEEE.},
  isbn     = {2327-4662},
  language = {English},
  doi      = {10.1109/JIOT.2016.2646375}
}
@article{RefWorks:doc:5d8f7275e4b0bc72a68f4dcb,
  author   = {P. K. Verma and R. Verma and A. Prakash and A. Agrawal and K. Naik and R. Tripathi and M. Alsabaan and T. Khalifa and T. Abdelkader and A. Abogharaf},
  year     = {2016},
  title    = {Machine-to-Machine (M2M) communications: A survey},
  journal  = {Journal of Network and Computer Applications},
  volume   = {66},
  pages    = {83-105},
  abstract = {Machine-to-Machine (M2M) communication is a promising technology for next generation communication systems. This communication paradigm facilitates ubiquitous communications with full mechanical automation, where a large number of intelligent devices connected by wired/wireless links, interact with each other without direct human intervention. As a result, M2M communication finds applications in wide areas such as smart grids, e-healthcare, home area networks, intelligent transportation systems, environmental monitoring, smart cities, and industrial automation. However, distinctive features in M2M communications form different challenges from those in human-to-human communications. These challenges need to be addressed, or otherwise it is not easy for this paradigm to gain trust of people. To understand M2M communications deeply, this paper presents a comprehensive review of M2M communication technology in terms of its system model architecture proposed by different standards developing organizations. This mainly includes 3GPP, ETSI, and oneM2M. Further, we have investigated distinctive features of various M2M applications and their supporting attributes, the M2M data traffic and their characterization, various M2M standardization bodies and their unique tasks, and potential M2M communication challenges and their proposed state-of-the-art solutions, followed by future research directions. © 2016 Elsevier Ltd. All rights reserved.},
  isbn     = {1084-8045},
  language = {English},
  doi      = {10.1016/j.jnca.2016.02.016}
}
