% Encoding: UTF-8
@article{PlugProduceByModellingSkills,
  author   = {J. Pfrommer and D. Stogl and K. Aleksandrov and S. Escaida Navarro and B. Hein and J. Beyerer},
  year     = {2015},
  title    = {Plug and produce by modelling skills and service-oriented orchestration of reconfigurable manufacturing systems},
  journal  = {At-Automatisierungstechnik},
  volume   = {63},
  number   = {10},
  pages    = {790-800},
  abstract = {Shortening product lifecycles and small lot sizes require manufacturing systems to adapt increasingly fast. Many existing machine tools, handling and logistics systems provide a generic functionality that is not bound to a specific product. But this flexibility and reconfigurability on the level of individual resources is lost in automated systems that are limited to the production of a fixed set of product variants. We propose a unified abstraction for the skills provided by the available resources and the product-specific manufacturing requirements. From these high-level descriptions, executable manufacturing procedures are derived, exposed as services and dynamically orchestrated at runtime in order to achieve the manufacturing goals. © 2015 Walter de Gruyter Berlin.},
  isbn     = {0178-2312},
  language = {English},
  doi      = {10.1515/auto-2014-1157}
}
@article{RefWorks:doc:5c44e246e4b0591b15ea9e59,
  author   = {P. Th Eugster and P. A. Felber and R. Guerraoui and A. -M Kermarrec},
  year     = {2003},
  title    = {The Many Faces of Publish/Subscribe},
  journal  = {ACM Computing Surveys},
  volume   = {35},
  number   = {2},
  pages    = {114-131},
  isbn     = {0360-0300},
  language = {English},
  doi      = {10.1145/857076.857078}
}
@article{LiteratureSurveyOnOpenPlatformCommunications,
  author  = {González, Isaías and Calderón, Antonio and Figueiredo, João and Sousa, João},
  year    = {2019},
  month   = {05},
  pages   = {510},
  title   = {A Literature Survey on Open Platform Communications (OPC) Applied to Advanced Industrial Environments},
  volume  = {8},
  journal = {Electronics},
  doi     = {10.3390/electronics8050510}
}
@software{mariusz_postol_2020_4361640,
  author    = {Mariusz Postół},
  title     = {Object Oriented Internet; Azure Gateway Implementation 1.0},
  month     = dec,
  year      = 2020,
  publisher = {GitHub},
  version   = {6.1.2},
  doi       = {10.5281/zenodo.4361640},
  url       = {https://github.com/mpostol/OPC-UA-OOI}
}
@inbook{Sunyaev2020,
  author    = {Sunyaev, Ali},
  title     = {Middleware},
  booktitle = {Internet Computing: Principles of Distributed Systems and Emerging Internet-Based Technologies},
  year      = {2020},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {125--154},
  isbn      = {978-3-030-34957-8}
}
@standard{RefWorks:doc:5d98837de4b055984c0eecf0,
  year        = {2018},
  title       = {OPC Unified Architecture Specification Part 14 - PubSub},
  institution = {OPC Foundation},
  type        = {Specyfication},
  number      = {10000-14},
  revision    = {1.04},
  language    = {English},
  url         = {https://opcfoundation.org/developer-tools/specifications-unified-architecture/part-14-pubsub/}
}
@techreport{UAPart14PubSubMainTechnologyFeatures,
  author    = {Mariusz Postol},
  title     = {Object-Oriented Internet; UA Part 14: PubSub Main Technology Features},
  year      = {2020},
  publisher = {gitbook},
  doi       = {10.5281/zenodo.4361640},
  url       = {https://commsvr.gitbook.io/ooi/reactive-communication/readme.pubsubmtf}
}
@inproceedings{mpostol2020,
  author    = {Post{\'o}{\l}, Mariusz},
  editor    = {Krzhizhanovskaya, Valeria V.
and Z{\'a}vodszky, G{\'a}bor
and Lees, Michael H.
and Dongarra, Jack J.
and Sloot, Peter M. A.
and Brissos, S{\'e}rgio
and Teixeira, Jo{\~a}o},
  title     = {Object-Oriented Internet Reactive Interoperability},
  booktitle = {Computational Science -- ICCS 2020},
  year      = {2020},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {409--422},
  isbn      = {978-3-030-50426-7}
}
@inbook{MicrosoftAzureIoTPlatform,
  author = {Bansal, Nirnay},
  year   = {2020},
  month  = {09},
  pages  = {33-48},
  title  = {Microsoft Azure IoT Platform},
  isbn   = {978-1-4842-6040-1}
}
@article{RefWorks:doc:5d92609be4b02eb43d372bd1,
  author   = {V. Kulkarni and S. Reddy},
  year     = {2003},
  title    = {Separation of concerns in model-driven development},
  journal  = {IEEE Software},
  volume   = {20},
  number   = {5},
  pages    = {64-69},
  abstract = {MDD has improved productivity, quality, and platform independence but hasn't been that successful at supporting reuse and system evolution. To do so, a system must be specified as a composition of multiple views corresponding to stakeholders and their concerns. The proposed Template abstraction addresses this problem in an integrated way, dealing with separation of concerns at both the model and the code level.},
  isbn     = {1937-4194},
  doi      = {10.1109/MS.2003.1231154}
}
@online{RefWorks:doc:5d925b77e4b030b4e0596f5d,
  author   = {Martin Fowler},
  year     = {2004},
  month    = {23 January},
  title    = {Inversion of Control Containers and the Dependency Injection pattern},
  volume   = {2019},
  number   = {10-01},
  abstract = {In the Java community there's been a rush of lightweight containers that help to assemble components from different projects into a cohesive application. Underlying these containers is a common pattern to how they perform the wiring, a concept they refer under the very generic name of "Inversion of Control". In this article I dig into how this pattern works, under the more specific name of "Dependency Injection", and contrast it with the Service Locator alternative. The choice between them is less important than the principle of separating configuration from use.},
  url      = {https://www.martinfowler.com/articles/injection.html}
}
@techreport{RefWorks:doc:5d9796cbe4b0f66c52dccf04,
  author      = {Mariusz Postol},
  year        = {2020},
  month       = {October 5},
  title       = {Csharp in Practice Adaptive Programming},
  institution = {Lodz University of Technology},
  abstract    = {The adaptive programming is presented as a catalog of language constructs, patterns, and frameworks used at the development and deployment stage with the goal to increase the adaptability of the program against changing production environment in which it is executed.},
  publisher   = {GitHub},
  doi         = {10.5281/zenodo.2578244},
  url         = {https://github.com/mpostol/TP}
}
@book{RefWorks:doc:5ac86c98e4b009947bbb874c,
  author    = {Wolfgang Mahnke and Stefan-Helmut Leitner and Matthias Damm},
  year      = {2009},
  month     = {May},
  title     = {OPC Unified Architecture},
  publisher = {Springer},
  edition   = {1},
  abstract  = {The OPC Foundation defines standards for online data exchange between automation systems. They address access to current data (OPC DA), alarms and events (OPC A\&E) and historical data (OPC HDA). Those standards are successfully applied in industrial automation. The new OPC Unified Architecture (OPC UA) unifies the existing standards and brings them to state-of-the-art technology using service-oriented architecture (SOA). Main advantages of the new standard are: Platform-independent technology allows the deployment of OPC UA beyond current OPC applications only running on Windows-based PC systems. OPC UA can also run on embedded systems as well as Linux / UNIX based enterprise systems. The provided information can be generically modeled and therefore arbitrary information models can be provided using OPC UA. This book gives an easy to understand introduction into OPC UA and explains the concepts of the standard and other relevant topics that are not directly addressed by the standard.},
  isbn      = {3540688986}
}
@standard{OPCUAPart1,
  year        = {2017},
  title       = {OPC Unified Architecture Specification Part 1 - Overview and Concepts},
  institution = {OPC Foundation},
  type        = {Specyfication},
  number      = {10000-1},
  revision    = {1.04},
  language    = {English},
  url         = {https://opcfoundation.org/developer-tools/specifications-unified-architecture/part-1-overview-and-concepts/}
}
